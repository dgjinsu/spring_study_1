스프링 프레임워크
- 핵심기술 : 스프링 DI 컨테이너, AOP, 이벤트
- 웹 기술 : 스프링 MVC
- 데이터 접근 기술 : ORM 지원, 트랜잭션, JDBC
- 기술 통합 : 캐시, 이메일, 원격접근, 스케줄링
- 테스트 : 스프링 기반 테스트 지원


스프링 부트
- 스프링을 편리하게 사용할 수 있도록 지원
- 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
- Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
- 손쉬운 빌드 구성을 위한 starter 종속성 제공 (라이브러리 사용 편리)
- 스프링과 외부 라이브러리 자동 구성 (버전 이슈 해결)


스프링의 진짜 핵심
- 자바 언어 기반의 프레임워크
- 자바 언어의 가장 큰 특징 - 객체 지향 언어
- 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
- 스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크


객체지향 언어의 특징
- 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 "객체" 들의 모임으로 파악하고자 하는 것
- 각각의 객체는 메세지를 주고받고, 데이터를 처리할 수 있다.
- 이는 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 개발에 많이 사용된다. -> 다형성


스프링과 객체지향
- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
- 제어의 역전(IoC), 의존관계 주입(DI) 는 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.


좋은 객체 지향 설계의 5가지 원칙 (SOLID)
SRP : 단일 책임 원칙
OCP : 개방-폐쇄 원칙
LSP : 리스코프 치환 원칙
ISP : 인터페이스 분리 원칙
DIP : 의존관계 역전 원칙


OCP
- 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다. (의존관게 주입을 통해 스프링에선 OCP를 지킬 수 있다)

DIP
- 추상화에 의존해야지, 구체화에 의존하면 안된다.
- 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻


AppConfig
- 애플리케이션의 전체 동작 방식을 구성(config)하기 위해, 구현 객체를 생성 하고 연결 하는 책임을 가지는 별도의 클래스


<제어의 역전>
AppConfig가 프로그램의 제어 흐름을 가져가는 것. 
프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 IoC(제어의 역전) 이라고 한다.

cf: 프레임워크가 내 코드를 제어하면 프레임워크, 반면에 내가 작성한 코드를 직접 제어한다면 라이브러리


<의존관계 주입 DI>
의존관계는 정적인 클래스 의존 관계와, 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계로 분리해서 생각해야 함
의존관계 주입을 사용하면 정적인 클라이언트 코드를 변경하지 않고 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.


스프링 컨테이너에서 memberService 찾아오기
ApplicationContext applicationCOntext = new AnnotationConfigApplicationContext(AppConfig.class)
MemberService memberService = application.getBean("memberService", memberService.class)
-> 스프링 컨테이너는 @Configuration이 붙은 클래스를 설정 정보로 사용, 이때 @Bean이 붙은 메소드 들을 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록

